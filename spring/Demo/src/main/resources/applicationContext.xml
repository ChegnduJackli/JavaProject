<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"
>

    <!-- 加载properties文件 -->
    <context:property-placeholder location="classpath:db.properties" />

<!--    https://stackoverflow.com/questions/3700720/cannot-find-class-org-springframework-jdbc-datasource-drivermanagerdatasourc-->
    <!-- 配置数据源，读取properties文件信息 ,这儿跟教程不一样，是个坑-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}" />
        <property name="url" value="${jdbc.jdbcUrl}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />

    </bean>

    <!--配置JDBC模板-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!--默认必须使用数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置dao -->
    <bean id="accountDao" class="ckDao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate" />
    </bean>
    <!-- 配置service -->
    <bean id="accountService" class="ckService.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao" />
    </bean>

    <!-- 事务管理器，依赖于数据源 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 注册事务管理驱动 -->
    <tx:annotation-driven transaction-manager="txManager"/>

<!--    &lt;!&ndash; 编写通知：对事务进行增强（通知），需要编写切入点和具体执行事务的细节 &ndash;&gt;-->
<!--    <tx:advice id="txAdvice" transaction-manager="txManager">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash; 给切入点方法添加事务详情，name表示方法名称，*表示任意方法名称，propagation用于设置传播行为，read-only表示隔离级别，是否只读 &ndash;&gt;-->
<!--            <tx:method name="find*" propagation="SUPPORTS"-->
<!--                       rollback-for="Exception" />-->
<!--            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"-->
<!--                       read-only="false" />-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    &lt;!&ndash; aop编写，让Spring自动对目标生成代理，需要使用AspectJ的表达式 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 切入点 &ndash;&gt;-->
<!--        <aop:pointcut expression="execution(* ckService.*.*(..))"-->
<!--                      id="txPointCut" />-->
<!--        &lt;!&ndash; 切面：将切入点与通知整合 &ndash;&gt;-->
<!--        <aop:advisor pointcut-ref="txPointCut" advice-ref="txAdvice" />-->
<!--    </aop:config>-->



    <!--把testDao对象的创建权交给Spring-->
    <bean id="testDao" class="dao.TestDaoImpl"></bean>
    <bean id="personDao" class="dao.PersonDaoImpl" scope="prototype" />

    <bean id="personService" class="dao.PersonServiceImpl">
        <!-- 将personDao实例注入personService实例中 -->
        <property name="personDao" ref="personDao"/>
    </bean>

<!--    scope="singleton" Spring 容器中只会存在一个共享的 Bean 实例，并且所有对 Bean 的请求，只要 id 与该 Bean 定义相匹配，就只会返回 Bean 的同一个实例。-->
    <bean id="person2" class="com.instance.static_factory.MyBeanFactory"
          factory-method="createBean" />

    <bean id="myBeanFactory" class="com.instance.factory.MyBeanFactory"/>
    <!-- factory-bean属性指定一个实例工厂，factory-method属性确定使用工厂中的哪个方法 -->
    <bean id="person3" factory-bean="myBeanFactory" factory-method="createBean" />

<!--    Spring 基于 XML 的装配通常采用两种实现方式，即设值注入（Setter Injection）和构造注入（Constructor Injection）-->
    <!-- 使用设值注入方式装配Person实例 -->
    <bean id="personBean1" class="dao.PersonBean">
        <property name="name" value="zhangsan" />
        <property name="age" value="20" />
    </bean>
    <!-- 使用构造方法装配Person实例 -->
    <bean id="personBean2" class="dao.PersonBean">
        <constructor-arg index="0" value="lisi" />
        <constructor-arg index="1" value="21" />
    </bean>

    <!--使用context命名空间，通知spring扫描指定目录，进行注解的解析-->
    <context:component-scan base-package="ckController"/>
    <context:component-scan base-package="ckDao"/>
    <context:component-scan base-package="ckService"/>

<!--    <bean id="personANDao" class="ckDao.impl.PersonANDaoImpl" />-->
<!--    <bean id="personANService" class="ckService.impl.PersonANServiceImpl"-->
<!--          autowire="byName" />-->
<!--    <bean id="personANAction" class="ckController.PersonANAction"-->
<!--          autowire="byName" />-->


</beans>